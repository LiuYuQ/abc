计算机操作系统
1、操作系统基本特征？
1. 并发
并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。
并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。
操作系统通过引入进程和线程，使得程序能够并发运行。
2. 共享
共享是指系统中的资源可以被多个并发进程共同使用。
有两种共享方式：互斥共享和同时共享。
互斥共享的资源称为临界资源，例如打印机等，在同一时间只允许一个进程访问，需要用同步机制来实现对临界资源的访问。
3. 虚拟
虚拟技术把一个物理实体转换为多个逻辑实体。
主要有两种虚拟技术：时分复用技术和空分复用技术。
多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占有处理器，每次只执行一小个时间片并快速切换。
虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。
4. 异步
异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。

2、操作系统基本功能？
1. 进程管理
进程控制、进程同步、进程通信、死锁处理、处理机调度等。
2. 内存管理
内存分配、地址映射、内存保护与共享、虚拟内存等。
3. 文件管理
文件存储空间的管理、目录管理、文件读写管理和保护等。
4. 设备管理
完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。
主要包括缓冲管理、设备分配、设备处理、虛拟设备等。

3、进程和线程？
进程控制块PCB的作用：
　　1：作为独立运行基本单位的标志
　　2：能实现间断性运行方式
　　3：提供进程通信管理所需要的信息
　　4：提供进程调度所需要的信息

进程：是具有一定功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源调度	  和分配的一个独立单位。包括程序段，相关数据段，和进程控制块PCB。
线程：是进程的实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈）。但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。
关系：一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。
区别：
主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。
优缺点：
线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。

进程作为资源（如内存）分配的基本单位，作为其下属的线程都是可以享用其被分配到的资源的，而且线程可以共享同一块被分配的资源。而进程之间是一般不能分享彼此的资源的，进程想要互相通信，必须通过进程间通信(Inter-process communication，IPC)的机制来完成，主要包括以下几种：（参见问题3）
管道（pipe，半双工），流管道（s_pipe，全双工），有名管道（FIFO，全双工）
信号量（sophomore/mutex）
信号（signal）
消息队列
共享内容
套接字（socket）
线程可以再分为两类：
一类是用户级线程(user level thread)。对于这类线程，有关线程管理的所有工作都由应用程序完成，内核意识不到线程的存在。在应用程序启动后，操作系统分配给该程序一个进程号，以及其对应的内存空间等资源。应用程序通常先在一个线程中运行，该线程被成为主线程。在其运行的某个时刻，可以通过调用线程库中的函数创建一个在相同进程中运行的新线程。 用户级线程的好处是非常高效，不需要进入内核空间，但并发效率不高。
另一类是内核级线程(kernel level thread)。对于这类线程，有关线程管理的所有工作由内核完成，应用程序没有进行线程管理的代码，只能调用内核线程的接口。内核维护进程及其内部的每个线程，调度也由内核基于线程架构完成。内核级线程的好处是，内核可以将不同线程更好地分配到不同的CPU，以实现真正的并行计算。
在现代操作系统中，往往使用组合方式实现多线程，即线程创建完全在用户空间中完成，并且一个应用程序中的多个用户级线程被映射到一些内核级线程上，相当于是一种折中方案。


4、进程的通信方式有哪些？
主要分为：管道、系统IPC（包括消息队列、信号量、共享存储）、SOCKET。
管道主要分为：普通管道PIPE 、流管道（s_pipe）、命名管道（name_pipe）。
·管道：是一种半双工的通信方式，数据只能单项流动，并且只能在具有亲缘关系的进程间流		动，通常是父子进程，不能实现跨网络的通信。
·命名管道：也是半双工的通信方式，它允许无亲缘关系的进程间进行通信，可以跨网络实现			进程间的通信。
·信号量：是一个计数器，用来控制多个进程对资源的访问，它通常作为一种锁机制。
·消息队列：是消息的链表，存放在内核中并由消息队列标识符标识。
·信号：是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。
·共享内存：就是映射一段能被其它进程访问的内存，这段共享内存由一个进程创建，但是多个进程可以访问，实际操作中对应的是“剪贴板”。
·客户机-服务器系统：包括套接字（socket），远程过程调用和远程方法调用。

5、线程同步机制？
①互斥量：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥		  对象只有一个，所以可以保证公共资源不会被多个线程同时访问。
②信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大		 线程数量。每个信号量都是公共资源，其值是一个32位计数。信号量的数据结构为		 一个值和一个指针，指针指向等待该信号量的下一个进程。信号量的值与相应资源的		 使用情况有关。当它的值大于0时，表示当前可用资源的数量；当它的值小于0时，		 其绝对值表示等待使用该资源的进程个数。信号量的值仅能由PV操作来改变。
实现的P，V操作算法描述：
P操作：while s>0：s=s-1。
V操作：s=s+1。
P表示申请一个资源，如果条件满足（即右可以分配的资源），则把资源分配给提出申请的进程，并且资源数目s减1。
V表示资源使用哪完毕之后，要把占有的资源释放，并且资源数目s加1 。
③事件（信号）：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比			   较操作。（比如Java中的notify（）唤醒wait（）状态的阻塞线程）

6、进程同步原则？
进程同步的主要任务：对多个相关进程在执行次序上进行协调，以使并发执行的诸进程之间能有效地共享资源和相互合作，从而使程序的执行具有可再现性。同步机制遵循的原则：
1：空闲让进；
2：忙则等待（保证对临界区的互斥访问）；
3：有限等待（有限代表有限的时间，避免死等）；
4：让权等待，（当进程不能进入自己的临界区时，应该释放处理机，以免陷入忙等状态）。



7、进程同步机制
原子操作、信号量机制、自旋锁管程、会合、分布式系统。

8、缓冲区溢出？危害？原因？
缓冲区：为暂时置放输出或输入资料的内存。
缓冲区溢出：是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。
危害：
·程序崩溃，导致拒绝服务；
·跳转并且执行一段恶意代码。
主要原因：
·程序中没有仔细检查用户输入。

9、进程有哪几种状态？
·就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源后便开始执行；
·运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数；
·阻塞状态：进程等待某种条件，在条件满足之前无法执行。


10、死锁？死锁产生的条件？如何预防避免？
·死锁：
在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲就是两个或多个进程无限期的阻塞、相互等待的一种状态。
·产生条件：
互斥条件：一个资源一次只能被一个进程使用。
请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放。
不可剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺。
循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系 。
·解决死锁的基本方法： 
预防死锁、避免死锁、检测死锁、解除死锁 
·解决死锁的基本策略：
鸵鸟策略、死锁检测与死锁恢复、死锁预防、死锁避免
鸵鸟策略：因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。
·预防死锁：
注意：由于互斥条件是非共享设备所必需的，不能改变。
1.破坏“请求与保持”条件：规定所有进程在开始运行之前，都必须一次性的申请其在整个运行过程所需要的全部资源。
优点：简单，安全。  
缺点：资源严重浪费，恶化了系统的利用率。
2.破坏“不可剥夺”条件：进程逐个的提出资源请求，当一个已经保持了某些资源的进程，再提出新的资源请求而不能立即得到满足时，必须释放它已经保持了的所有资源，待以后需要时再重新申请。
缺点：实现复杂，代价大，反复地申请和释放资源，而使进程的执行无限的推迟、延长了进程的周转时间增加系统开销、降低系统吞吐量。
3.破坏“环路等待”条件：将所有的资源按类型进行线性排队，并赋予不同的序号。所有进程请求资源必须按照资源递增的次序提出，防止出现环路。
缺点：1、序号必须相对稳定，限制了新设备类型的增加2、进程使用资源顺序和系统规定的顺序不同而造成资源的浪费3、限制了用户编程。

·避免死锁：
安全状态：
如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。

11、分页、分段的区别？
共同点：两者都采用离散分配方式，且都地址映射机构来实现地址的转换。
不同点：
①页是信息的物理单位，采用分页存储管理方式是为了实现离散分配方法，提高内存的利用率。段是信息的逻辑单位，采用分段目的主要在于能更好的满足用户的需求。
②页的大小固定且有系统决定，在采用分页存储管理方式中直接由硬件实现。
而段的大小不固定，决定于用户所编写的程序。
③分页的地址空间是一维的，分段系统中是二维的。
④段便于存储保护和信息的共享，页的保护和共享受到限制。

段页式存储管理方式
基本原理是分段和分页相结合，其地址结构由：段号、段内页号、页内地址三部分组成。在段页式系统中获得一条指令需要三次访问内存，第一次访问内存中的段表，第二次访问内存中的页表，第三次访问内存中的数据。

12、处理机调度层次？
·高级调度：
主要用于多道批处理系统中，又称长作业调度，调度队像是作业，根据某种算法决定将后备队列中的哪几个作业调入内存。
·低级调度：
操作系统中最基本的一种调度方式（频率最高），在多道批处理、分时和时实三中类型的OS中都存在，又称为短作业调度。
·中级调度:
又称为内存调度，目的是为了提高内存的利用率和系统的吞吐率。
 
13、作业调度算法？
①先来先服务算法（FSFS）
最简单的调度算法，既可用于作业调度也可用于进程调度，系统按照作业到达的先后顺序进行调度，或者是优先考虑在系统中等待时间最长的作业
②短作业优先调度算法（SJF）
    实际情况短作业占有比例很大，为了使他们比长作业优先执行，而产生了短作业优先的调度算法，作业越短优先级越高。
    缺点：是必须知道作业的运行时间，对长作业不利，人机无法实现交互，未完全考虑作业的紧迫程度。
③优先级调度算法（PSA）
在优先级算法中，基于作业的紧迫程度。紧迫程度越高，优先级越高。
④高响应比优先调度算法（HRRN）
　　在FSFS中只是考虑作业的等待时间而忽略作业的运行时间，SJF算法正好相反，高响应比算法既考虑作业的等待时间有考虑作业的运行时间，
优先权 = （等待时间+要求服务时间）/要求服务时间
由于等待时间与服务时间之和就是作业的响应时间，故优先级相当于响应比Rp
　　    Rp = （等待时间+要求服务时间）/要求服务时间 = 响应时间/要求服务时间

14、Windows下的内存是如何管理的？
Windows提供了3种方法来进行内存管理：
①虚拟内存，最适合用来管理大型对象或者结构数组；
②内存映射文件，最适合用来管理大型数据流（通常来自文件）以及在单个计算机上运行多个进程之间共享数据；
③内存堆栈，最适合用来管理大量的小对象。

Windows操纵内存可以分两个层面：物理内存和虚拟内存。
其中物理内存由系统管理，不允许应用程序直接访问。

15、虚拟内存？和主存的关系？
虚拟内存是一些系统页文件，存放在磁盘上，每个系统页文件大小为4K，物 理内存也被分页，每个页大小也为4K，这样虚拟页文件和物理内存页就可以对应，实际上虚拟内存就是用于物理内存的临时存放的磁盘空间。页文件就是内存页， 物理内存中每页叫物理页，磁盘上的页文件叫虚拟页，物理页+虚拟页就是系统所有使用的页文件的总和。



16、虚拟存储器页面置换算法

①最佳置换算法（Optimal）：
一种理论的算法，选着淘汰的页面是以后一定不再使用的页面（理想化的），该算法无法实现，只能作为其他算法好坏的一个评价对比。
②先进先出（FIFO）算法：
总是最先淘汰最先进去的页面，该算法容易实现。缺点：通常程序调入内存的先后顺序和程序执行的先后顺序不一致，导致缺页率高。
③最近最久未使用（LEU）：
FIFO算法性能差，LRU算法根据页面调入内存的先后孙旭决定，因为违法预测未来的使用情况，就是用过去的使用情况作为将来的使用情况的近似。
④最少使用算法（LFU）：
在每个页面设置一个移位寄存器记录该页面的访问频率，最近时期最少使用的页面被淘汰。
